@Library('my-shared-library') _

pipeline{
    agent any
    
    parameters{
        choice(description: 'create or destory our application' name: 'action', choices: 'create\ndelete')
        string(description: 'docker Build name',name: 'ImageName' ,defaultValue: 'javapp' )
        string(description: 'docker Build tag',name: 'ImageTag' ,defaultValue: 'v1' )
        string(description: 'docker application name',name: 'DockerHubUser' ,defaultValue: 'gchauhan1997' )

    }

    environment{
        ACCESS_AWS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_AWS_KEY = credentials('AWS_SECRET_KEY_ID')
    }

    tools{
        java "jdk17"
        maven "maven11"
    }

    environment{
        SCANNER_HOME= tool "sonar-scanner"
    }
    stages{
        stage("clean workspace"){
            steps{
                cleanWs()
            }
        }
        stage("git checkout"){
            when{ expression{ params.action == create}}
            steps{
                git branch: 'main' , url: 'https://github.com/gaurav-997/cicdproject.git/Jenkins_sharedlib'  
            }
        }
        stage("unit test maven"){
            when{ expression{ params.action == create}}
            steps{
                mvnTest()  
            }
        }
        stage("Integration test maven"){
            when{ expression{ params.action == create}}
            steps{
                mvnIntegrationTest()
            }
        }
        stage("Stati code analysis: SonarQube "){
            when{expression{ params.action == create}}
            steps{
                def SonarcredentialsId == 'jenkins'   # this is the sonartoken name
                staticCodeAnalysis(SonarcredentialsId)
            }
        }
        stage("Quality gate Status"){
            when{expression{ params.action == create}}
            steps{
                def SonarcredentialsId == 'jenkins'   # this is the sonartoken name
                qualityGateStatus(SonarcredentialsId)
            }
        }
        stage("maven build"){
            when{expression{ params.action == create}}
            steps{
                mavenBuild()
            }
        }
        stage("Docker build "){
            when{expression{ params.action == create}}
            steps{
                dockerBuild("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
            }
        }
        stage("trivy file scan"){
            when{expression{ params.action == create}}
            steps{
                trivyFileScan("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
            }
        }
        stage("docker push"){
            when{expression{ params.action == create}}
            steps{
                dockerPush("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
            }
        }
        stage("EKS cluster create with terraform"){
            when{expression{ params.action == create}}
            steps{
                script{
                    dir('eks_module'){
                        sh """
                            terraform init 
                            terraform plan --var 'access_key=${ACCESS_AWS_KEY}' --var 'secret_key=${SECRET_AWS_KEY}' --var-file=./config/terraform.tfvars
                            terraform apply --var 'access_key=${ACCESS_AWS_KEY}' --var 'secret_key=${SECRET_AWS_KEY}' --var-file=./config/terraform.tfvars --auto-approve
                        """
                    }
                }
            }
        }
        stage("connect to EKS"){
            steps{
                script{
                    sh """
                    aws configure set aws_access_key ${ACCESS_AWS_KEY}
                    aws configure set aws_secret_key ${SECRET_AWS_KEY}
                    aws configure set aws_region 
                 
                    """
                }
        
            }
        }
    }
}